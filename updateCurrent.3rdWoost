#include <stdio.h>
#include <stdlib.h>
#include "mesh.h"
#include "constants.h"
#include "plasma.h"
#include <math.h>
#include "mpi.h"

void updateCurrent2D_3rd_Order(Domain *D)
{
    int i,j,s,n,i1,i2,j1,j2,intXc,intYc;
    int nxSub,nySub;
    double inverDt,dx,dt,dy,xr,yr;
    double Fx1,Fx2,Wx1,Wx2,Wx3,Wi1,Wj1;
    double Fy1,Fy2,Wy1,Wy2,Wy3;
    double xcenter,xdiff,ycenter,ydiff,x1,y1,x2,y2;
    double vz,gamma,xc,yc,wx,wy,xcc,ycc,xold,xnew,yold,ynew;
    ptclList *p;
    FieldElement **field; 
    LoadList *LL;   
    field=D->field;

    double maximum(),minimum();

    double coeff[D->nSpecies];
    int charge[D->nSpecies];

    nxSub=D->nxSub;
    nySub=D->nySub;
   
    dt=D->dt;
    dx=D->dx; 
    dy=D->dy;
    inverDt=1.0/D->dt;
    s=0;
    LL=D->loadList;
    while(LL->next)
    {
       coeff[s]=LL->charge*LL->density/LL->criticalDensity/LL->numberInCell;
//       coeff[s]=LL->charge*LL->superP/LL->criticalDensity/D->lambda/D->lambda/dx/dy;
//       charge[s]=LL->charge;
       LL=LL->next;
       s++;
    }

    int myrank,nTasks;
    MPI_Status status;

    MPI_Comm_size(MPI_COMM_WORLD, &nTasks);
    MPI_Comm_rank(MPI_COMM_WORLD, &myrank);

    //initialize J
    for(i=0; i<nxSub+5; i++)
      for(j=0; j<nySub+5; j++)
      {
        field[i][j].J1Old=field[i][j].J1;
        field[i][j].J2Old=field[i][j].J2;
        field[i][j].J3Old=field[i][j].J3;
        field[i][j].J1=0.0;
        field[i][j].J2=0.0;
        field[i][j].J3=0.0;
      }

    for(i=2; i<=nxSub+1; i++)
      for(j=2; j<=nySub+1; j++)
      {
        for(s=0; s<D->nSpecies; s++)
        {
          p=field[i][j].head[s]->pt;     
         
          while(p) 
          {
            gamma=sqrt(1.0+p->p1*p->p1+p->p2*p->p2+p->p3*p->p3);
            vz=p->p3/gamma;
            xold=p->oldX;
            xnew=p->x+i;
            yold=p->oldY;
            ynew=p->y+j;

            xc=0.5*(xold+xnew);
            yc=0.5*(yold+ynew);
            intXc=(int)xc;
            intYc=(int)yc;
            xcc=xc-intXc;
            ycc=yc-intYc;

            i1=(int)(xold);
            j1=(int)(yold);
            i2=(int)(xnew);
            j2=(int)(ynew);

            if(i1==i2) 
              xr=0.5*(xold+xnew);
            else 
              xr=maximum(i1*1.0,i2*1.0);
            if(j1==j2) 
              yr=0.5*(yold+ynew);
            else 
              yr=maximum(j1*1.0,j2*1.0);

            Fx1=(xr-xold);
            Fx2=(xnew-xr);
            Fy1=(yr-yold)*dy*inverDt;
            Fy2=(ynew-yr)*dy*inverDt;

            xcenter=0.5*(xold+xr)-i1;
            xdiff=xr-xold;
            ycenter=xcenter-0.5;
            y1=ycenter+xdiff*0.5/sqrt(3.0);
            y2=ycenter-xdiff*0.5/sqrt(3.0);                                 
            Wx1=0.25*xdiff*(y1*y1+y2*y2);
            Wx3=Wx1+xcenter*xdiff;
            Wx2=xdiff-Wx1-Wx3;
            field[i1][j1].J2+=Fy1*Wx1*coeff[s];
            field[i1+1][j1].J2+=Fy1*Wx2*coeff[s];
            field[i1+2][j1].J2+=Fy1*Wx3*coeff[s];

            ycenter=0.5*(yold+yr)-j1;
            ydiff=yr-yold;
            xcenter=ycenter-0.5;
            x1=xcenter+ydiff*0.5/sqrt(3.0);                                    x2=xcenter-ydiff*0.5/sqrt(3.0);                                 
            Wy1=0.25*ydiff*(x1*x1+x2*x2);
            Wy3=Wy1+ycenter*ydiff;
            Wy2=ydiff-Wy1-Wy3;
            field[i1][j1].J1+=Fx1*Wy1*coeff[s];
            field[i1][j1+1].J1+=Fx1*Wy2*coeff[s];
            field[i1][j1+2].J1+=Fx1*Wy3*coeff[s];

            i1=(int)xr;
            j1=(int)yr;
            xcenter=0.5*(xnew+xr)-i1;
            xdiff=xnew-xr;
            ycenter=xcenter-0.5;
            y1=ycenter+xdiff*0.5/sqrt(3.0);                        
            y2=ycenter-xdiff*0.5/sqrt(3.0);                                 
            Wx1=0.25*xdiff*(y1*y1+y2*y2);
            Wx3=Wx1+xcenter*xdiff;
            Wx2=xdiff-Wx1-Wx3;
            field[i1][j1].J2+=Fy2*Wx1*coeff[s];
            field[i1+1][j1].J2+=Fy2*Wx2*coeff[s];
            field[i1+2][j1].J2+=Fy2*Wx3*coeff[s];

            ycenter=0.5*(ynew+yr)-j1;
            ydiff=ynew-yr;
            xcenter=ycenter-0.5;
            x1=xcenter+ydiff*0.5/sqrt(3.0);                                    x2=xcenter-ydiff*0.5/sqrt(3.0);                                 
            Wy1=0.25*ydiff*(x1*x1+x2*x2);
            Wy3=Wy1+ycenter*ydiff;
            Wy2=ydiff-Wy1-Wy3;
            field[i1][j1].J1+=Fx2*Wy1*coeff[s];
            field[i1][j1+1].J1+=Fx2*Wy2*coeff[s];
            field[i1][j1+2].J1+=Fx2*Wy3*coeff[s];


             wx=1-xcc; wy=1-ycc;            
             field[intXc][intYc].J3+=wx*wy*vz*coeff[s];
             wx=xcc; wy=ycc;            
             field[intXc+1][intYc+1].J3+=wx*wy*vz*coeff[s];
             wx=1-xcc; wy=ycc;            
             field[intXc][intYc+1].J3+=wx*wy*vz*coeff[s];
             wx=xcc; wy=1-ycc;            
             field[intXc+1][intYc].J3+=wx*wy*vz*coeff[s];

             p=p->next;
           }	//End of while(p)
        }	//End of for(s)     
     }		//End of for(i,j)

}
void updateCurrent2D_2nd_Order(Domain *D)
{
    int i,j,s,n,i1,i2,j1,j2,intXc,intYc;
    int nxSub,nySub;
    double inverDt,dx,dt,dy,xr,yr;
    double Fx1,Fx2,Wx1,Wx2,Wx3,Wi1,Wj1;
    double Fy1,Fy2,Wy1,Wy2,Wy3;
    double vz,gamma,xc,yc,wx,wy,xcc,ycc,xold,xnew,yold,ynew;
    ptclList *p;
    FieldElement **field; 
    LoadList *LL;   
    field=D->field;

    double maximum(),minimum();

    double coeff[D->nSpecies];
    int charge[D->nSpecies];

    nxSub=D->nxSub;
    nySub=D->nySub;
   
    dt=D->dt;
    dx=D->dx; 
    dy=D->dy;
    inverDt=1.0/D->dt;
    s=0;
    LL=D->loadList;
    while(LL->next)
    {
       coeff[s]=LL->charge*LL->density/LL->criticalDensity/LL->numberInCell;
//       coeff[s]=LL->charge*LL->superP/LL->criticalDensity/D->lambda/D->lambda/dx/dy;
//       charge[s]=LL->charge;
       LL=LL->next;
       s++;
    }

    int myrank,nTasks;
    MPI_Status status;

    MPI_Comm_size(MPI_COMM_WORLD, &nTasks);
    MPI_Comm_rank(MPI_COMM_WORLD, &myrank);

    //initialize J
    for(i=0; i<nxSub+5; i++)
      for(j=0; j<nySub+5; j++)
      {
        field[i][j].J1Old=field[i][j].J1;
        field[i][j].J2Old=field[i][j].J2;
        field[i][j].J3Old=field[i][j].J3;
        field[i][j].J1=0.0;
        field[i][j].J2=0.0;
        field[i][j].J3=0.0;
      }

    for(i=2; i<=nxSub+1; i++)
      for(j=2; j<=nySub+1; j++)
      {
        for(s=0; s<D->nSpecies; s++)
        {
          p=field[i][j].head[s]->pt;     
         
          while(p) 
          {
            gamma=sqrt(1.0+p->p1*p->p1+p->p2*p->p2+p->p3*p->p3);
            vz=p->p3/gamma;
            xold=p->oldX;
            xnew=p->x+i;
            yold=p->oldY;
            ynew=p->y+j;

            xc=0.5*(xold+xnew);
            yc=0.5*(yold+ynew);
            intXc=(int)xc;
            intYc=(int)yc;
            xcc=xc-intXc;
            ycc=yc-intYc;

            i1=(int)(xold+0.5);
            j1=(int)(yold+0.5);
            i2=(int)(xnew+0.5);
            j2=(int)(ynew+0.5);

            if(i1==i2) 
              xr=0.5*(xold+xnew);
            else             
              xr=(i1+i2)*0.5;
            if(j1==j2) 
              yr=0.5*(yold+ynew);
            else             
              yr=(j1+j2)*0.5;

            Wi1=(xold+xr)*0.5-i1;
            Wj1=(yold+yr)*0.5-j1;
            Fx1=(xr-xold)*(0.5-Wi1);
            Fx2=(xr-xold)*(0.5+Wi1);
            Fy1=(yr-yold)*dy*inverDt*(0.5-Wj1);
            Fy2=(yr-yold)*dy*inverDt*(0.5+Wj1);
                                 
            Wx1=0.5*(0.5-Wi1)*(0.5-Wi1);
            Wx2=0.75-Wi1*Wi1;
            Wx3=0.5*(0.5+Wi1)*(0.5+Wi1);
            Wy1=0.5*(0.5-Wj1)*(0.5-Wj1);
            Wy2=0.75-Wj1*Wj1;
            Wy3=0.5*(0.5+Wj1)*(0.5+Wj1);

            field[i1-1][j1-1].J1+=Fx1*Wy1*coeff[s];
            field[i1-1][j1].J1+=Fx1*Wy2*coeff[s];
            field[i1-1][j1+1].J1+=Fx1*Wy3*coeff[s];
            field[i1][j1-1].J1+=Fx2*Wy1*coeff[s];
            field[i1][j1].J1+=Fx2*Wy2*coeff[s];
            field[i1][j1+1].J1+=Fx2*Wy3*coeff[s];

            field[i1-1][j1-1].J2+=Fy1*Wx1*coeff[s];
            field[i1][j1-1].J2+=Fy1*Wx2*coeff[s];
            field[i1+1][j1-1].J2+=Fy1*Wx3*coeff[s];
            field[i1-1][j1].J2+=Fy2*Wx1*coeff[s];
            field[i1][j1].J2+=Fy2*Wx2*coeff[s];
            field[i1+1][j1].J2+=Fy2*Wx3*coeff[s];

            i1=(int)(xr+0.5);
            j1=(int)(yr+0.5);

            Wi1=(xnew+xr)*0.5-i1;
            Wj1=(ynew+yr)*0.5-j1;
            Fx1=(xnew-xr)*(0.5-Wi1);
            Fx2=(xnew-xr)*(0.5+Wi1);
            Fy1=(ynew-yr)*dy*inverDt*(0.5-Wj1);
            Fy2=(ynew-yr)*dy*inverDt*(0.5+Wj1);
                                 
            Wx1=0.5*(0.5-Wi1)*(0.5-Wi1);
            Wx2=0.75-Wi1*Wi1;
            Wx3=0.5*(0.5+Wi1)*(0.5+Wi1);
            Wy1=0.5*(0.5-Wj1)*(0.5-Wj1);
            Wy2=0.75-Wj1*Wj1;
            Wy3=0.5*(0.5+Wj1)*(0.5+Wj1);

            field[i1-1][j1-1].J1+=Fx1*Wy1*coeff[s];
            field[i1-1][j1].J1+=Fx1*Wy2*coeff[s];
            field[i1-1][j1+1].J1+=Fx1*Wy3*coeff[s];
            field[i1][j1-1].J1+=Fx2*Wy1*coeff[s];
            field[i1][j1].J1+=Fx2*Wy2*coeff[s];
            field[i1][j1+1].J1+=Fx2*Wy3*coeff[s];

            field[i1-1][j1-1].J2+=Fy1*Wx1*coeff[s];
            field[i1][j1-1].J2+=Fy1*Wx2*coeff[s];
            field[i1+1][j1-1].J2+=Fy1*Wx3*coeff[s];
            field[i1-1][j1].J2+=Fy2*Wx1*coeff[s];
            field[i1][j1].J2+=Fy2*Wx2*coeff[s];
            field[i1+1][j1].J2+=Fy2*Wx3*coeff[s];

             wx=1-xcc; wy=1-ycc;            
             field[intXc][intYc].J3+=wx*wy*vz*coeff[s];
             wx=xcc; wy=ycc;            
             field[intXc+1][intYc+1].J3+=wx*wy*vz*coeff[s];
             wx=1-xcc; wy=ycc;            
             field[intXc][intYc+1].J3+=wx*wy*vz*coeff[s];
             wx=xcc; wy=1-ycc;            
             field[intXc+1][intYc].J3+=wx*wy*vz*coeff[s];

             p=p->next;
           }	//End of while(p)
        }	//End of for(s)     
     }		//End of for(i,j)

}


void updateCurrent2D_1st_Order(Domain *D)
{
    int i,j,s,n,i1,i2,j1,j2,intXc,intYc;
    int nxSub,nySub;
    double inverDt,x1,x2,y1,y2,xr,yr;
    double Fx1,Fx2,Wx1,Wx2,Fy1,Fy2,Wy1,Wy2,dx,dy,dt;
    double vz,gamma,xc,yc,wx,wy,xcc,ycc;
    ptclList *p;
    FieldElement **field; 
    LoadList *LL;   
    field=D->field;
    double maximum();
    double minimum();

    double coeff[D->nSpecies];
    int charge[D->nSpecies];

    nxSub=D->nxSub;
    nySub=D->nySub;
   
    dt=D->dt;
    dx=D->dx; 
    dy=D->dy;
    inverDt=1.0/D->dt;
    s=0;
    LL=D->loadList;
    while(LL->next)
    {
       coeff[s]=LL->charge*LL->density/LL->criticalDensity/LL->numberInCell;
//       coeff[s]=LL->charge*LL->superP/LL->criticalDensity/D->lambda/D->lambda/dx/dy;
//       charge[s]=LL->charge;
       LL=LL->next;
       s++;
    }

    int myrank,nTasks;
    MPI_Status status;

    MPI_Comm_size(MPI_COMM_WORLD, &nTasks);
    MPI_Comm_rank(MPI_COMM_WORLD, &myrank);

    //initialize J
    for(i=0; i<nxSub+5; i++)
      for(j=0; j<nySub+5; j++)
      {
        field[i][j].J1Old=field[i][j].J1;
        field[i][j].J2Old=field[i][j].J2;
        field[i][j].J3Old=field[i][j].J3;
        field[i][j].J1=0.0;
        field[i][j].J2=0.0;
        field[i][j].J3=0.0;
      }

    for(i=2; i<=nxSub+1; i++)
      for(j=2; j<=nySub+1; j++)
      {
        for(s=0; s<D->nSpecies; s++)
        {
          p=field[i][j].head[s]->pt;     
         
          while(p) 
          {
             gamma=sqrt(1.0+p->p1*p->p1+p->p2*p->p2+p->p3*p->p3);
             vz=p->p3/gamma;
             x2=p->x+i;  y2=p->y+j;
             x1=p->oldX;  y1=p->oldY;
             xc=0.5*(x1+x2);  yc=0.5*(y1+y2);
             intXc=(int)xc;   intYc=(int)yc;
             xcc=xc-intXc;    ycc=yc-intYc;
             i1=(int)x1;
             i2=(int)x2;
             j1=(int)y1;
             j2=(int)y2;
             if(i1==i2) 
               xr=0.5*(x1+x2);
             else 
               xr=maximum(i1*1.0,i2*1.0);
             if(j1==j2) 
               yr=0.5*(y1+y2);
             else 
               yr=maximum(j1*1.0,j2*1.0);

             Fx1=(xr-x1);
             Fx2=(x2-xr);
             Fy1=(yr-y1)*dy*inverDt;
             Fy2=(y2-yr)*dy*inverDt;
             Wx1=0.5*(x1+xr)-i1;
             Wx2=0.5*(xr+x2)-i2;
             Wy1=0.5*(y1+yr)-j1;
             Wy2=0.5*(yr+y2)-j2;

             field[i1][j1].J1+=Fx1*(1.0-Wy1)*coeff[s];
             field[i1][j1+1].J1+=Fx1*Wy1*coeff[s];
             field[i1][j1].J2+=Fy1*(1.0-Wx1)*coeff[s];
             field[i1+1][j1].J2+=Fy1*Wx1*coeff[s];

             field[i2][j2].J1+=Fx2*(1.0-Wy2)*coeff[s];
             field[i2][j2+1].J1+=Fx2*Wy2*coeff[s];
             field[i2][j2].J2+=Fy2*(1.0-Wx2)*coeff[s];
             field[i2+1][j2].J2+=Fy2*Wx2*coeff[s];

             wx=1-xcc; wy=1-ycc;            
             field[intXc][intYc].J3+=wx*wy*vz*coeff[s];
             wx=xcc; wy=ycc;            
             field[intXc+1][intYc+1].J3+=wx*wy*vz*coeff[s];
             wx=1-xcc; wy=ycc;            
             field[intXc][intYc+1].J3+=wx*wy*vz*coeff[s];
             wx=xcc; wy=1-ycc;            
             field[intXc+1][intYc].J3+=wx*wy*vz*coeff[s];


             p=p->next;
           }	//End of while(p)
        }	//End of for(s)     
     }		//End of for(i,j)


}


double findR(double x1, double x2,double x3, double x4)
{
  double minimum();
  double maximum();
  double result,result1,result2,result3;

  result1=minimum(x1-0.5,x2-0.5);
  result2=maximum(x1-1.5,x2-1.5);
  result3=maximum(result2,(x3+x4)*0.5);
  result=minimum(result1,result3);

  return result;
}

double maximum(double x1,double x2)
{
   double result;

   if(x1>=x2)
      result=x1;
   else
      result=x2;
  
   return result;
}

double minimum(double x1,double x2)
{
   double result;

   if(x1>=x2)
      result=x2;
   else
      result=x1;
  
   return result;
}

int intmaximum(int x1,int x2)
{
   int result;

   if(x1>=x2)
      result=x1;
   else
      result=x2;
  
   return result;
}

int intminimum(int x1,int x2)
{
   int result;

   if(x1>=x2)
      result=x2;
   else
      result=x1;
  
   return result;
}
